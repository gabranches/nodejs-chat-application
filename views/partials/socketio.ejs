<script src="https://cdn.socket.io/socket.io-1.2.0.js"></script>

<script>
  
var socket = io();

// Send client info to server
socket.on('connect', function () { 
    socket.emit('user-connect', client);
    client.socketID = socket.io.engine.id;
});

// Send message to server
$('#msg-form').submit(function(){
    client.msg = $('#message').val();
    socket.emit('msg-to-server', client);
    printMessage({socketID: client.socketID, msg: client.msg, nick: client.nick});
    $('#message').val('');
    stopTyping();
    return false;
});

// Edit name
$("#change-name").click(function() {
    // toggleChangNameForm("on");
    $('#change-name-modal').modal()
});

// Send changed name to server
$('#change-name-form').submit(function(){
    var newname = $("#change-name-input").val().trim();
    if (newname !== '' && newname.length < 30) {
        stopTyping();
        $("#change-name-loader").show();
        client.newname = newname;
        changeName();
    }
    return false;
});



// Send the client's typing behavior
$("#message").keyup(function() {
    if ($(this).val() === '') {
        console.log('stopped typing');
        stopTyping();
    } else {
        if (typingList.indexOf(client.nick) === -1) {
            console.log('sent typing');
            socket.emit('typing-to-server', {room: client.room, status: 1, nick: client.nick});
        }
    }
});


// Receive message from server
socket.on('msg-to-room', function (data){
    if (data.socketID !== client.socketID) {
        printMessage(data);
        flashTitle(client.room);
    }
});

// Update room status info 
socket.on('room-status', function(data){
    console.log('Received room info.');
    $('#active-users').html('<span class="glyphicon glyphicon-user"></span> ' + data.msg.users);
});

// Receive client typing behavior
socket.on('typing-to-client', function (data) {
    console.log('received typing info');
    if (data.status === 1) {
        // Push user to typing array if not already in
        if (typingList.indexOf(data.nick) === -1 && data.nick !== client.nick) {
            typingList.push(data.nick);
        }
    } else {
        // Remove user from typing array
        if (data.nick !== client.nick) {
            var index = typingList.indexOf(data.nick);
            typingList.splice(index, 1);
        }
    }
    
    updateTypingStatus();

});

// Print recent messages
socket.on('recent-msgs', function(msgArray){
    console.log('Received recent messages.');
    if (msgArray.msg !== undefined) {
        msgArray.msg.forEach(function (data){
            printMessage(data);
        });
    }
});

</script>
